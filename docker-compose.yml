version: '2'

networks:
    datapipeline:
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: "172.18.0.0/16"

services:

  jobmanager:
    build: ./flink
    image: flink/pyflink:1.0
    container_name: jobmanager
    volumes:
      - ./flink/script/main.py:/opt/pyflink/main.py
    hostname: "jobmanager"
    expose:
      - "6123"
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
    networks:
      datapipeline:
        ipv4_address: 172.18.0.2

  taskmanager:
    image: flink/pyflink:1.0
    container_name: taskmanager
    volumes:
    - ./flink/script/main.py:/opt/pyflink/main.py
    expose:
      - "6121"
      - "6122"
    depends_on:
      - jobmanager
    command: taskmanager
    links:
      - jobmanager:jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
    networks:
      datapipeline:
        ipv4_address: 172.18.0.3

  zookeeper:
    image: 'bitnami/zookeeper:latest'
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      datapipeline:
        ipv4_address: 172.18.0.4
  
  kafka:
    image: 'bitnami/kafka:latest'
    container_name: kafka
    hostname: kafka
    ports:
      - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://172.18.0.5:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - TOPIC_NAME=Order
    depends_on:
      zookeeper:
        condition: service_started
    volumes:
      - ./kafka/kafka-setup.sh:/kafka-setup.sh
    networks:
      datapipeline:
        ipv4_address: 172.18.0.5

  api-producer:
    build:
      context: ./api-producer
      dockerfile: dockerfile
    container_name: api-producer
    depends_on:
      kafka-create-topic:
        condition: service_completed_successfully
    ports:
      - '8082:8080'
    networks:
      datapipeline:
        ipv4_address: 172.18.0.7

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.8.0
    container_name: elasticsearch
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
    ports:
      - "9200:9200"
      - "9300:9300"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    networks:
      datapipeline:
        ipv4_address: 172.18.0.8

  kibana:
    image: docker.elastic.co/kibana/kibana:7.8.0
    container_name: kibana
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      datapipeline:
        ipv4_address: 172.18.0.9
